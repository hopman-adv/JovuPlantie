/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlantService } from "../plant.service";
import { PlantCreateInput } from "./PlantCreateInput";
import { Plant } from "./Plant";
import { PlantFindManyArgs } from "./PlantFindManyArgs";
import { PlantWhereUniqueInput } from "./PlantWhereUniqueInput";
import { PlantUpdateInput } from "./PlantUpdateInput";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ChatMessageWhereUniqueInput } from "../../chatMessage/base/ChatMessageWhereUniqueInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { LikeFindManyArgs } from "../../like/base/LikeFindManyArgs";
import { Like } from "../../like/base/Like";
import { LikeWhereUniqueInput } from "../../like/base/LikeWhereUniqueInput";

export class PlantControllerBase {
  constructor(protected readonly service: PlantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Plant })
  async createPlant(@common.Body() data: PlantCreateInput): Promise<Plant> {
    return await this.service.createPlant({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Plant] })
  @ApiNestedQuery(PlantFindManyArgs)
  async plants(@common.Req() request: Request): Promise<Plant[]> {
    const args = plainToClass(PlantFindManyArgs, request.query);
    return this.service.plants({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Plant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async plant(
    @common.Param() params: PlantWhereUniqueInput
  ): Promise<Plant | null> {
    const result = await this.service.plant({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Plant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlant(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() data: PlantUpdateInput
  ): Promise<Plant | null> {
    try {
      return await this.service.updatePlant({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          photo: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Plant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlant(
    @common.Param() params: PlantWhereUniqueInput
  ): Promise<Plant | null> {
    try {
      return await this.service.deletePlant({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          photo: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/chatMessages")
  @ApiNestedQuery(ChatMessageFindManyArgs)
  async findChatMessages(
    @common.Req() request: Request,
    @common.Param() params: PlantWhereUniqueInput
  ): Promise<ChatMessage[]> {
    const query = plainToClass(ChatMessageFindManyArgs, request.query);
    const results = await this.service.findChatMessages(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        plant: {
          select: {
            id: true,
          },
        },

        receiver: true,
        sender: true,
        sentAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatMessages")
  async connectChatMessages(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        connect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatMessages")
  async updateChatMessages(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        set: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatMessages")
  async disconnectChatMessages(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        disconnect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: PlantWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        plant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  async connectComments(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  async updateComments(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  async disconnectComments(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/likes")
  @ApiNestedQuery(LikeFindManyArgs)
  async findLikes(
    @common.Req() request: Request,
    @common.Param() params: PlantWhereUniqueInput
  ): Promise<Like[]> {
    const query = plainToClass(LikeFindManyArgs, request.query);
    const results = await this.service.findLikes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        plant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likes")
  async connectLikes(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        connect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likes")
  async updateLikes(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        set: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likes")
  async disconnectLikes(
    @common.Param() params: PlantWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        disconnect: body,
      },
    };
    await this.service.updatePlant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
