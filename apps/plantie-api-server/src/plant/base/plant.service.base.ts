/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Plant as PrismaPlant,
  ChatMessage as PrismaChatMessage,
  Comment as PrismaComment,
  Like as PrismaLike,
  User as PrismaUser,
} from "@prisma/client";

export class PlantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlantCountArgs, "select">): Promise<number> {
    return this.prisma.plant.count(args);
  }

  async plants(args: Prisma.PlantFindManyArgs): Promise<PrismaPlant[]> {
    return this.prisma.plant.findMany(args);
  }
  async plant(args: Prisma.PlantFindUniqueArgs): Promise<PrismaPlant | null> {
    return this.prisma.plant.findUnique(args);
  }
  async createPlant(args: Prisma.PlantCreateArgs): Promise<PrismaPlant> {
    return this.prisma.plant.create(args);
  }
  async updatePlant(args: Prisma.PlantUpdateArgs): Promise<PrismaPlant> {
    return this.prisma.plant.update(args);
  }
  async deletePlant(args: Prisma.PlantDeleteArgs): Promise<PrismaPlant> {
    return this.prisma.plant.delete(args);
  }

  async findChatMessages(
    parentId: string,
    args: Prisma.ChatMessageFindManyArgs
  ): Promise<PrismaChatMessage[]> {
    return this.prisma.plant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatMessages(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.plant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.plant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.plant
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
